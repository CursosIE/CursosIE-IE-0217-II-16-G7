

using namespace std;

public class TicTacToe {

    int[][] matrix;

    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        matrix = new int[n][n];
    }

    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or -1.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                -1: Player 2 wins. */


       ANALISIS DE COMPLEJIDAD:


    int move(int row, int col, int player) {


        matrix[row][col]=player;               ACCESO 2, ASIGNACION 1,

        //check row
        boolean win=true;                      ACCESO 2, ASIGNACION 1
        for(int i=0; i<matrix.length; i++){    ASIGNACION 1, COMPARACION 1, ACCESO 1, INCREMENTO 1 (N VECES)
            if(matrix[row][i]!=player){        ACCESO 2, COMPARACION 1
                win=false;                     ACCESO 2, COMPARACION 1
                break;
            }
        }

                         T1(n) = (1+2+2+1) + (1+1+1+2+1+2+1+1)n = 10n + 6

        if(win) return player;                ACCESO 1

        //check column
        win=true;                             ACCESO 1
        for(int i=0; i<matrix.length; i++){   ASIGNACION 1, COMPARACION 1, ACCESO 1, INCREMENTO 1 (N VECES)
            if(matrix[i][col]!=player){       ACCESO 2, COMPARAACION 1
                win=false;                    ACCESO 1, COMPARACION 1
                break;
            }
        }

                        T2(n) = (1+1) + (1+1+1+1+2+1+1+1)n = 9n + 2

        if(win) return player;               ACCESO 1

        //check back diagonal
        win=true;                            ACCESO 1
        for(int i=0; i<matrix.length; i++){  ASIGNACION 1, COMPARACION 1, ACCESO 1, INCREMENTO 1 (N VECES
            if(matrix[i][i]!=player){        ACCESO 2, COMPARAACION 1
                win=false;                   ACCESO 1, COMPARACION 1
                break;
            }
        }

                        T3(n) = (1+1) + (1+1+1+1+2+1+1+1)n = 9n + 2



        if(win) return player;              ACCESO 1

        //check forward diagonal
        win=true;                           ACCESO 1
        for(int i=0; i<matrix.length; i++){ ASIGNACION 1, COMPARACION 1, ACCESO 1, INCREMENTO 1 (N VECES
            if(matrix[i][matrix.length-i-1]!=player){ ACCESO 3, COMPARAACION 1
                win=false;                  ACCESO 1, COMPARACION 1
                break;
            }
        }
                      T4(n) = (1+1) + (1+1+1+1+2+1+1+1)n = 10n + 2


        if(win) return player;

        return 0;
    }


    COMPLEJIDAD DEL METODO MOVE:

    Ttotal(n) = T1 + T2 + T3 + T4 = 38n + 12



    int main()
    {
        int player = -1;                        ASIGNACION 1

        boolean end = false;                    ASIGNACION 1

        int n = 3;                              ASIGNACION 1
        int r, c, result;

        TicTacToe ttt = new TicTacToe(n);       ASIGNACION 1
        while(!end)                             ACCESO 1 (N^2 VECES)
        {
            player *= -1                        ASIGNACION 1
            r =  randomInt(0, 3);               ASIGNACION 1
            c =  randomInt(0, 3);               ASIGNACION 1

            result = move(player, r, c);        LLAMADO A MOVE
            if(result != 0)                     ACCESO 1, COMPARACION 1
            {
                print("player " + result + " won.");  ACCESO 3
                end = true;                     ASIGNACION 1
            }
        }
        return 0;
    }
}
  COMPLEJIDAD MAIN:

  T(n) = (1+1+1+1) + ((1+1+1+1+1+1+1+3+1)+(38n + 12))n^2 = 4 + (38n + 23)n^2  = 38n^3 +23n^2 +4
  O(T(n)) =  O(n^3)
